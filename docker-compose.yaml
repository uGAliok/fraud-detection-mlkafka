services:
  # Zookeeper (обязательный для Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    networks:
      - ml-scorer
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  # Сервис Kafka
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    networks:
      - ml-scorer
    ports:
      - "9095:9095"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"  # Отключаем автосоздание топиков
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9095", "--list"]
      interval: 5s
      timeout: 10s
      retries: 10

  # Сервис для создания топиков при старте
  kafka-setup:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      kafka:
        condition: service_healthy  # Ждем пока Kafka станет здоровой
    networks:
      - ml-scorer
    restart: on-failure
    entrypoint: [ "/bin/bash", "-c" ]
    command: |
      "
      echo 'Ожидание готовности Kafka...'
      while ! kafka-topics --bootstrap-server kafka:9092 --list; do
        sleep 1
      done

      echo 'Создание топиков...'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic transactions --partitions 3 --replication-factor 1 --config retention.ms=604800000
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic scoring --partitions 3 --replication-factor 1 --config retention.ms=604800000

      echo 'Топики успешно созданы:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "
  
  # Сервис для удобного просмотра топиков и настройки kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    networks:
      - ml-scorer
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  fraud_detector:
    build: ./fraud_detector
    networks:
      - ml-scorer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_TRANSACTIONS_TOPIC: "transactions"
      KAFKA_SCORING_TOPIC: "scoring"
    depends_on:
      - kafka
      - kafka-setup

  interface:
    build: ./interface
    networks:
      - ml-scorer
    environment:
      KAFKA_BROKERS: "kafka:9092"  # Используем внутренний адрес Kafka
      KAFKA_TOPIC: "transactions"
    depends_on:
      - kafka
    ports:
      - "8501:8501"

networks:
  ml-scorer:
    name: ml-scorer
    driver: bridge